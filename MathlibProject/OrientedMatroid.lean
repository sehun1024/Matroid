import Mathlib

namespace Signed
/-New inductive type sign. In Mathlib there is no exact type sign but they defined sign as ‚Ñ§ -/
inductive sign where
| plus:sign
| minus:sign
| zero:sign

def int_of_sign (s:sign):‚Ñ§ :=
match s with
| sign.plus => 1
| sign.minus =>-1
| sign.zero => 0

instance : Coe sign ‚Ñ§  where
  coe := int_of_sign


def opp (s:sign):sign :=
match s with
|sign.plus => sign.minus
|sign.minus => sign.plus
|sign.zero => sign.zero

def isSameSigned (s u:sign) :Prop :=
 ( s=sign.plus ‚àß u=sign.plus ) ‚à® (s=sign.minus ‚àß u=sign.minus)

def isOppositeSigned (s u:sign) :Prop :=
 ( s=sign.plus ‚àß u=sign.minus ) ‚à® (s=sign.minus ‚àß u=sign.plus)

structure SignedType (Œ± : Type*) where
sign: Œ± -> sign

def instPosPart {Œ±:Type*} (S:SignedType Œ±) :SignedType Œ± where
sign:=
 fun x:Œ± =>
match (S.sign x) with
|sign.plus =>sign.plus
|_ => sign.zero
-- {x| S.sign x= sign.plus}

def instNegPart {Œ±:Type*} (S:SignedType Œ±) :SignedType Œ± where
sign:=
 fun x:Œ± =>
match (S.sign x) with
|sign.minus =>sign.plus
|_ => sign.zero

def support {Œ±:Type*} (S: SignedType Œ±) :Set Œ± :=
{x| S.sign x= sign.plus ‚à® S.sign x= sign.minus}

def SignedType_opp {Œ±:Type*} (S:SignedType Œ±):SignedType Œ± where
sign:=opp ‚àò S.sign

instance {Œ± :Type*} : Coe (SignedType Œ±) (Set Œ±)  where
  coe := support

instance {Œ±:Type*} :EmptyCollection (SignedType Œ±) where
emptyCollection:= {sign:= fun _=> sign.zero}

instance {Œ±:Type*} : PosPart (SignedType Œ±) where
posPart:=instPosPart

instance {Œ±:Type*} : NegPart (SignedType Œ±) where
negPart:=instNegPart

instance :Neg sign where
neg:=opp

instance {Œ±:Type*}  : Neg (SignedType Œ±) where
neg:=SignedType_opp

--Obvious Facts
theorem negative_singed_type_is_singed_type_of_negative
  {Œ±:Type*} (X:SignedType Œ± ) (x:Œ±) :(-X).sign x =-(X.sign x) := by
  simp [instNegSignedType]
  simp [SignedType_opp]
  rfl

theorem negative_of_empty_is_empty {Œ±:Type*} : (‚àÖ : SignedType Œ±) = -‚àÖ := by
rfl

theorem negative_of_negative_is_self {Œ±:Type*} (X:SignedType Œ±) :
-(-X)=X :=by
simp [instNegSignedType]
simp [SignedType_opp]
congr
apply funext
intros x
simp
induction (X.sign x)
rfl;rfl;rfl

end Signed

namespace Matroid

section
open Signed

def isOrthogonal {Œ±:Type*} (S U:SignedType Œ±): Prop :=
‚àÉ x:Œ±, isSameSigned (S.sign x) (U.sign x) ‚Üî
 ‚àÉ y:Œ±, isOppositeSigned (S.sign y) (U.sign y)

/- Instead of deprecated version of Circuit, it is right way to define a Circuit -/

class Circuit_type {Œ±:Type u_1} (M:Matroid Œ±) :Type u_1 where
base_set: Set Œ±
isCircuit_axiom :IsCircuit M base_set

class Cocircuit_type {Œ±:Type u_1} (M:Matroid Œ±) :Type u_1 where
base_set: Set Œ±
isCocircuit_axiom :IsCocircuit M base_set


class OrientedMatroid_rough_ver (Œ± : Type*) extends Matroid Œ± where
circuit_assignment (x:Set Œ±): Matroid.IsCircuit _ x-> SignedType Œ±
circuit_support (x:Set Œ±) (p:_): support (circuit_assignment x p) = x
cocircuit_assignment (x:Set Œ±): Matroid.IsCocircuit _ x-> SignedType Œ±
cocircuit_support (x:Set Œ±) (p:_): support (cocircuit_assignment x p) = x
circuit_cocircuit_orthogonality (x y:Set Œ±)
 (p: Matroid.IsCircuit _ x) (q: Matroid.IsCocircuit _ y )
 :isOrthogonal (circuit_assignment x p) (cocircuit_assignment y q)

class OrientedMatroid (Œ± : Type*) extends Matroid Œ± where
circuit_assignment : Circuit_type toMatroid -> SignedType Œ±
cocircuit_assignment : Cocircuit_type toMatroid -> SignedType Œ±
circuit_support (C:Circuit_type toMatroid):
support (circuit_assignment C) = C.base_set
cocircuit_support (U:Cocircuit_type toMatroid):
support (cocircuit_assignment U) = U.base_set
circuit_cocircuit_orthogonality
(C:Circuit_type toMatroid) (U:Cocircuit_type toMatroid)
:isOrthogonal (circuit_assignment C) (cocircuit_assignment U)

/- Wikipedia version Signed Circuit Axiom-/

class Is_Set_of_Signed_Circuit {Œ±:Type*} (M:Matroid Œ±) (ùìí :Set (SignedType Œ±)):Prop where
nonempty : ¬¨ (‚àÖ ‚àà ùìí)
symmetric: ‚àÄ (C:SignedType Œ±), C ‚àà ùìí ‚Üî -C ‚àà ùìí
incomparable :  ‚àÄ (X Y :SignedType Œ±), X ‚àà ùìí ‚àß Y ‚àà ùìí ->  support X ‚äÜ support Y
 -> (X=Y ‚à® X=-Y)
weak_elimination : ‚àÄ (X Y :SignedType Œ±), X ‚àà ùìí ‚àß Y ‚àà ùìí ->  X ‚â† -Y ‚àß e ‚àà (‚Üë(X‚Å∫):Set Œ±) ‚à© (‚Üë(Y‚Åª) :Set Œ± )
 -> ‚àÉ Z ‚àà ùìí, ((‚ÜëZ‚Å∫:Set Œ±)  ‚äÜ ‚ÜëX‚Å∫ ‚à™ ‚ÜëY‚Å∫ \{e} ) ‚àß ((‚ÜëZ‚Åª :Set Œ±)  ‚äÜ ‚ÜëX‚Åª ‚à™ ‚ÜëY‚Åª \{e} )

-- set_option pp.fieldNotation false

theorem OrientedMatroidEquivDef {Œ± : Type*} (M : OrientedMatroid Œ±) :
Is_Set_of_Signed_Circuit (M.toMatroid) ({M.circuit_assignment C|C:M.Circuit_type} ‚à™ {- (M.circuit_assignment C)|C:M.Circuit_type}) := by
constructor
¬∑ case nonempty =>
    simp_all only [Set.mem_union, Set.mem_setOf_eq, not_or, not_exists]
    apply And.intro
    ¬∑ intro C hp
      let h1:= (M.circuit_support C)
      let h2:= Matroid.Dep.nonempty (Minimal.prop C.isCircuit_axiom)
      rw [hp] at h1
      rw [‚Üê h1] at h2
      simp [support] at h2
    ¬∑ intro C hp
      have h3: OrientedMatroid.circuit_assignment C = ‚àÖ
      let h4:= (congrArg (@Neg.neg _ instNegSignedType) hp)
      rw [negative_of_negative_is_self] at h4
      rw [‚Üê negative_of_empty_is_empty] at h4
      exact h4
      let h1:= (M.circuit_support C)
      let h2:= Matroid.Dep.nonempty (Minimal.prop C.isCircuit_axiom)
      rw [h3] at h1
      rw [‚Üê h1] at h2
      simp [support] at h2
¬∑ case symmetric =>
  intro C
  simp_all only [Set.mem_union, Set.mem_setOf_eq]
  apply Iff.intro
  ¬∑ intro a
    cases a with
    | inl h =>
      obtain ‚ü®w, h‚ü© := h
      subst h
      simp_all only [exists_apply_eq_apply, or_true]
    | inr h_1 =>
      obtain ‚ü®w, h‚ü© := h_1
      subst h
      sorry --very tedious
  ¬∑ intro a
    cases a with
    | inl h =>
      obtain ‚ü®w, h‚ü© := h
      sorry
    | inr h_1 =>
      obtain ‚ü®w, h‚ü© := h_1
      sorry
¬∑ case incomparable =>
  intro X Y h1 h2
  simp_all only [Set.mem_union, Set.mem_setOf_eq]
  obtain ‚ü®XinC, YinC‚ü© := h1
  cases XinC with
  | inl h3 =>
    cases YinC with
    | inl h4 =>
      obtain ‚ü®XC, h3‚ü© := h3
      obtain ‚ü®YC, h4‚ü© := h4
      let h5:= (XC.isCircuit_axiom )
      let h6:= (YC.isCircuit_axiom )
      let h7:= (M.circuit_support XC)
      let h8:= (M.circuit_support YC)
      rw [h3] at h7
      rw [h4] at h8
      let h9:= (Minimal.le_of_le h6 (Minimal.prop h5))
      rw [‚Üê h7] at h9
      rw [‚Üê h8] at h9
      let h10 := h9 h2


      sorry
    | inr h_2 =>
      obtain ‚ü®w, h3‚ü© := h3
      obtain ‚ü®w_1, h_1‚ü© := h_2
      subst h_1 h
      sorry
  | inr h_1 =>
    cases YinC with
    | inl h =>
      obtain ‚ü®w, h_1‚ü© := h_1
      obtain ‚ü®w_1, h‚ü© := h
      subst h h_1
      sorry
    | inr h_2 =>
      obtain ‚ü®w, h‚ü© := h_1
      obtain ‚ü®w_1, h_1‚ü© := h_2
      subst h_1 h
      sorry

 sorry

toMatroid.
end

end Matroid
